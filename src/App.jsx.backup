import React, { useState, useEffect } from 'react';
import { app, db, storage } from './firebase';
import { getAuth, signInWithPopup, GoogleAuthProvider, signOut } from 'firebase/auth';
import {
  collection,
  getDocs,
  addDoc,
  updateDoc,
  deleteDoc,
  doc,
  query,
  orderBy,
  limit
} from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL, uploadBytesResumable, deleteObject, listAll } from 'firebase/storage';
import PhotoGallery from './PhotoGallery';
import VideoSelector from './VideoSelector';
import UploadStatus from './UploadStatus';

// --- ÍCONES SVG COMO COMPONENTES ---
const PlayIcon = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="currentColor" stroke="none"><polygon points="5 3 19 12 5 21 5 3"></polygon></svg>
);
const SkipBackIcon = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" strokeWidth="2"><polygon points="19 20 9 12 19 4 19 20"></polygon><line x1="5" x2="5" y1="19" y2="5"></line></svg>
);
const SkipForwardIcon = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" strokeWidth="2"><polygon points="5 4 15 12 5 20 5 4"></polygon><line x1="19" x2="19" y1="5" y2="19"></line></svg>
);
const ShuffleIcon = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="m18 14 4 4-4 4"></path><path d="m18 2 4 4-4 4"></path><path d="M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22"></path><path d="M2 6h1.972a4 4 0 0 1 3.6 2.2"></path><path d="M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45"></path></svg>
);
const RepeatIcon = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="m17 2 4 4-4 4"></path><path d="M3 11v-1a4 4 0 0 1 4-4h14"></path><path d="m7 22-4-4 4-4"></path><path d="M21 13v1a4 4 0 0 1-4 4H3"></path></svg>
);
const ChevronDownIcon = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="m6 9 6 6 6-6"></path></svg>
);
const EllipsisIcon = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><circle cx="12" cy="12" r="1"></circle><circle cx="19" cy="12" r="1"></circle><circle cx="5" cy="12" r="1"></circle></svg>
);
const CameraIcon = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"></path><circle cx="12" cy="13" r="3"></circle></svg>
);
const LockIcon = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>
);

// --- FUNÇÕES UTILITÁRIAS ---
const getEmbedUrl = (url) => {
  if (!url) return null;
  let youtubeMatch = url.match(/(?:https?:\/\/)?(?:www\.)?(?:m\.)?(?:youtube\.com|youtu\.be)\/(?:watch\?v=|embed\/|v\/|)([\w-]{11})(?:\S+)?/);
  if (youtubeMatch && youtubeMatch[1]) return `https://www.youtube.com/embed/${youtubeMatch[1]}`;
  let spotifyMatch = url.match(/(?:https?:\/\/)?open\.spotify\.com\/(track|album|playlist)\/([a-zA-Z0-9]+)/);
  if (spotifyMatch) return `https://open.spotify.com/embed/${spotifyMatch[1]}/${spotifyMatch[2]}`;
  return null;
};

function HomePage({ onNavigate }) {
  const [isLoaded, setIsLoaded] = useState(false);

  useEffect(() => {
    setIsLoaded(true);
  }, []);

  return (
    <div className="relative text-center p-8 max-w-2xl mx-auto bg-slate-900 text-white h-screen flex flex-col justify-center overflow-hidden">
      {/* Background animado */}
      <div className="absolute inset-0 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900"></div>
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(16,185,129,0.1),transparent_50%)]"></div>
      
      {/* Partículas flutuantes */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(15)].map((_, i) => (
          <div
            key={i}
            className="absolute w-2 h-2 bg-emerald-400/30 rounded-full animate-float"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 3}s`,
              animationDuration: `${3 + Math.random() * 2}s`
            }}
          />
        ))}
      </div>

      <div className={`relative z-10 stagger-children ${isLoaded ? 'animate-fade-in-up' : ''}`}>
        <h1 className="text-5xl md:text-6xl font-black text-transparent bg-clip-text bg-gradient-to-r from-emerald-400 via-cyan-400 to-emerald-400 mb-4 animate-typing">
          MY LOVED SOFIA rewind
        </h1>
        <p className="mb-8 text-lg text-slate-300 animate-fade-in-up" style={{ animationDelay: '0.5s' }}>
          Guarde aqui suas memórias e sentimentos mais especiais.
        </p>
        <button 
          onClick={() => onNavigate('form')} 
          className="btn-primary text-xl animate-bounce-in hover-lift"
          style={{ animationDelay: '1s' }}
        >
          ✨ Criar nova memória ✨
        </button>
      </div>

      {/* Efeito de brilho no fundo */}
      <div className="absolute inset-0 bg-gradient-to-r from-transparent via-emerald-500/5 to-transparent animate-pulse" style={{ animationDuration: '4s' }}></div>
    </div>
  );
}

function MemoryForm({ onCreateMemory, onNavigate, initialData, loadingMemory }) {
  // Estados principais do formulário
  const [title, setTitle] = useState('');
  const [message, setMessage] = useState('');
  const [musicUrl, setMusicUrl] = useState('');
  const [musicTitle, setMusicTitle] = useState('');
  const [musicArtist, setMusicArtist] = useState('');
  const [coupleNames, setCoupleNames] = useState('');
  const [startDate, setStartDate] = useState('');
  const [secretLoveEnabled, setSecretLoveEnabled] = useState(false);
  const [secretPassword, setSecretPassword] = useState('');
  const [secretMessage, setSecretMessage] = useState('');
  const [error, setError] = useState('');
  const [uploadError, setUploadError] = useState('');

  // Fotos: array de {file, url, name, uploaded, progress}
  const [photos, setPhotos] = useState([]);
  // Vídeo: {file, url, name, uploaded, progress}
  const [video, setVideo] = useState(null);
  const [availableStoragePhotos, setAvailableStoragePhotos] = useState([]); // [{url, name, selected}]

  // Preencher formulário ao editar
  useEffect(() => {
    if (initialData) {
      setTitle(initialData.title || '');
      setMessage(initialData.message || '');
      setMusicUrl(initialData.musicUrl || '');
      setMusicTitle(initialData.musicTitle || '');
      setMusicArtist(initialData.musicArtist || '');
      setCoupleNames(initialData.coupleNames || '');
      setStartDate(initialData.startDate || '');
      setSecretLoveEnabled(initialData.secretLoveEnabled || false);
      setSecretPassword(initialData.secretPassword || '');
      setSecretMessage(initialData.secretMessage || '');
      // Fotos já existentes
      if (initialData.photos && Array.isArray(initialData.photos)) {
        setPhotos(initialData.photos.map(url => ({ file: null, url, name: url.split('/').pop(), uploaded: true, progress: 100 })));
      }
      // Vídeo já existente
      if (initialData.secretVideo) {
        setVideo({ file: null, url: initialData.secretVideo, name: initialData.secretVideo.split('/').pop(), uploaded: true, progress: 100 });
      }
    }
  }, [initialData]);

  // Buscar imagens já presentes no Storage ao abrir o formulário de nova memória
  useEffect(() => {
    async function fetchStoragePhotos() {
      if (initialData) return; // Só para nova memória
      try {
        const photosRef = ref(storage, 'memories/photos/');
        const res = await listAll(photosRef);
        const urls = await Promise.all(res.items.map(async (itemRef) => {
          const url = await getDownloadURL(itemRef);
          return { url, name: itemRef.name, selected: false };
        }));
        setAvailableStoragePhotos(urls);
      } catch (e) {
        // Se não houver fotos, não faz nada
      }
    }
    fetchStoragePhotos();
  }, [initialData]);

  // Selecionar/deselecionar imagem do Storage
  const toggleSelectStoragePhoto = (idx) => {
    setAvailableStoragePhotos(prev => prev.map((p, i) => i === idx ? { ...p, selected: !p.selected } : p));
  };

  // Adicionar fotos
  const handlePhotoSelection = (files) => {
    // Remover validação de tamanho
    const newPhotos = Array.from(files).map(file => ({ file, url: URL.createObjectURL(file), name: file.name, uploaded: false, progress: 0 }));
    setPhotos(prev => [...prev, ...newPhotos].slice(0, 10));
  };
  // Remover foto
  const handleRemovePhoto = (idx) => {
    setPhotos(prev => prev.filter((_, i) => i !== idx));
  };
  // Substituir foto
  const handleReplacePhoto = (file, idx) => {
    setPhotos(prev => prev.map((p, i) => i === idx ? { file, url: URL.createObjectURL(file), name: file.name, uploaded: false, progress: 0 } : p));
  };

  // Adicionar vídeo
  const handleVideoSelection = (file) => {
    // Remover validação de tamanho
    setVideo({ file, url: URL.createObjectURL(file), name: file.name, uploaded: false, progress: 0 });
  };
  // Remover vídeo
  const handleRemoveVideo = () => {
    setVideo(null);
  };
  // Substituir vídeo
  const handleReplaceVideo = (file) => {
    setVideo({ file, url: URL.createObjectURL(file), name: file.name, uploaded: false, progress: 0 });
  };

  // Função utilitária para sanitizar nome de arquivo
  function sanitizeFileName(name) {
    return name
      .normalize('NFD').replace(/[ -]/g, '') // remove acentos
      .replace(/[^a-zA-Z0-9.\-_]/g, '_') // só letras, números, ponto, traço, underline
      .replace(/_+/g, '_');
  }
  function getTimestampName(prefix, originalName) {
    const now = new Date();
    const yyyy = now.getFullYear();
    const mm = String(now.getMonth() + 1).padStart(2, '0');
    const dd = String(now.getDate()).padStart(2, '0');
    const hh = String(now.getHours()).padStart(2, '0');
    const min = String(now.getMinutes()).padStart(2, '0');
    const ss = String(now.getSeconds()).padStart(2, '0');
    const sanitized = sanitizeFileName(originalName);
    return `${prefix}_${yyyy}-${mm}-${dd}_${hh}-${min}-${ss}_${sanitized}`;
  }

  // Upload em lote de fotos
  const handleUploadPhotos = async () => {
    setUploadError('');
    const newPhotos = await Promise.all(photos.map(async (p, i) => {
      if (p.uploaded) return p;
      const fileName = getTimestampName('foto', p.name);
      const storageRef = ref(storage, `memories/photos/${fileName}`);
      const uploadTask = uploadBytesResumable(storageRef, p.file);
      return await new Promise((resolve, reject) => {
        uploadTask.on('state_changed',
          (snapshot) => {
            setPhotos(prev => prev.map((ph, idx) => idx === i ? { ...ph, progress: Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100) } : ph));
          },
          (error) => { setUploadError('Erro ao enviar fotos.'); reject(error); },
          async () => {
            const url = await getDownloadURL(storageRef);
            resolve({ ...p, url, uploaded: true, progress: 100, name: fileName });
          }
        );
      });
    }));
    setPhotos(newPhotos);
  };

  // Upload do vídeo
  const handleUploadVideo = async () => {
    if (!video || video.uploaded) return;
    setUploadError('');
    const fileName = getTimestampName('video', video.name);
    const storageRef = ref(storage, `memories/secret_videos/${fileName}`);
    const uploadTask = uploadBytesResumable(storageRef, video.file);
    await new Promise((resolve, reject) => {
      uploadTask.on('state_changed',
        (snapshot) => {
          setVideo(v => ({ ...v, progress: Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100) }));
        },
        (error) => { setUploadError('Erro ao enviar vídeo.'); reject(error); },
        async () => {
          const url = await getDownloadURL(storageRef);
          setVideo(v => ({ ...v, url, uploaded: true, progress: 100, name: fileName }));
          resolve();
        }
      );
    });
  };

  // Verifica se há upload pendente
  const hasPendingUploads = photos.some(p => !p.uploaded) || (video && !video.uploaded);

  // Submit
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!title || !message || !startDate || !coupleNames || !musicTitle || !musicArtist) {
      setError('Todos os campos principais são obrigatórios.');
      return;
    }
    if (secretLoveEnabled && (!secretPassword || !secretMessage || !video || !video.uploaded)) {
      setError('Para a seção "Secret Love", a senha, a mensagem secreta e o vídeo são obrigatórios.');
      return;
    }
    setError('');
    const selectedStorageUrls = availableStoragePhotos.filter(p => p.selected).map(p => p.url);
    onCreateMemory({
      title, message, musicUrl, musicTitle, musicArtist, coupleNames, startDate,
      photos: [...photos.filter(p => p.uploaded).map(p => p.url), ...selectedStorageUrls],
      secretLoveEnabled, secretPassword, secretVideo: video && video.uploaded ? video.url : null, secretMessage
    });
  };

  // Remover foto já enviada
  const handleRemoveUploadedPhoto = (idx) => {
    setPhotos(prev => prev.filter((_, i) => i !== idx));
  };
  // Remover vídeo já enviado
  const handleRemoveUploadedVideo = () => {
    setVideo(null);
  };

  // Drag & drop para fotos
  const handleDrop = (e) => {
    e.preventDefault();
    const files = Array.from(e.dataTransfer.files).filter(f => f.type.startsWith('image/'));
    if (files.length > 0) handlePhotoSelection(files);
  };
  const handleDragOver = (e) => {
    e.preventDefault();
  };

  // Padronizar nomes de handlers
  const isUploading = hasPendingUploads || loadingMemory;
  const [isFormLoaded, setIsFormLoaded] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => setIsFormLoaded(true), 100);
    return () => clearTimeout(timer);
  }, []);

  return (
    <div className="min-h-screen bg-slate-900 text-white p-6 relative overflow-hidden">
      {/* Background animado */}
      <div className="absolute inset-0 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900"></div>
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_30%_20%,rgba(16,185,129,0.05),transparent_50%)]"></div>
      
      {/* Partículas sutis */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(8)].map((_, i) => (
          <div
            key={i}
            className="absolute w-1 h-1 bg-emerald-400/20 rounded-full animate-float"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 4}s`,
              animationDuration: `${4 + Math.random() * 3}s`
            }}
          />
        ))}
      </div>

      <div className="relative z-10 max-w-3xl mx-auto">
        <UploadStatus error={error} uploadError={uploadError} loading={isUploading} />
        
        <button 
          onClick={() => onNavigate('home')} 
          className="mb-6 text-emerald-400 hover:text-emerald-300 transition-all duration-300 hover:scale-105 focus-visible group" 
          disabled={isUploading}
        >
          <span className="inline-flex items-center gap-2">
            <span className="transform transition-transform group-hover:-translate-x-1">←</span>
            Voltar
          </span>
        </button>
        
        <h2 className="text-3xl font-bold mb-6 animate-fade-in-up text-gradient">
          {initialData ? '✏️ Editar Memória' : '✨ Criar Nova Memória'}
        </h2>
        
        {error && (
          <div className="bg-red-500/20 text-red-300 p-3 rounded-lg mb-4 animate-bounce-in border border-red-500/30">
            <span className="flex items-center gap-2">
              <span>⚠️</span>
              {error}
            </span>
          </div>
        )}
        
        {uploadError && (
          <div className="bg-red-500/20 text-red-300 p-3 rounded-lg mb-4 animate-bounce-in border border-red-500/30">
            <span className="flex items-center gap-2">
              <span>⚠️</span>
              {uploadError}
            </span>
          </div>
        )}
        
        <form onSubmit={handleSubmit} className={`space-y-6 ${isFormLoaded ? 'animate-fade-in-up' : ''}`}>
          {/* Campos Principais */}
          <div className="card stagger-children">
            <h3 className="text-xl font-bold mb-4 text-gradient">📝 Informações Básicas</h3>
            <input 
              type="text" 
              value={title} 
              onChange={e => setTitle(e.target.value)} 
              className="input-field mb-4" 
              placeholder="Título da memória (Ex: Nosso Primeiro Ano)"
            />
            <input 
              type="text" 
              value={coupleNames} 
              onChange={e => setCoupleNames(e.target.value)} 
              className="input-field mb-4" 
              placeholder="Nomes do Casal (Ex: Marcelo e Sofia)"
            />
            <div className="mb-4">
              <label className="text-sm text-slate-400 mb-2 block">📅 Data e hora do primeiro encontro</label>
              <input
                type="datetime-local"
                value={startDate}
                onChange={e => setStartDate(e.target.value)}
                className="input-field"
              />
              <div className="text-xs text-slate-400 mt-1">O formato se adapta ao seu sistema (12h ou 24h).</div>
            </div>
          </div>

          {/* Seção de Música */}
          <div className="card stagger-children">
            <h3 className="text-xl font-bold mb-4 text-gradient">🎵 Música Especial</h3>
            <input 
              type="text" 
              value={musicTitle} 
              onChange={e => setMusicTitle(e.target.value)} 
              className="input-field mb-4" 
              placeholder="Nome da Música"
            />
            <input 
              type="text" 
              value={musicArtist} 
              onChange={e => setMusicArtist(e.target.value)} 
              className="input-field mb-4" 
              placeholder="Artista da Música"
            />
            <input 
              type="url" 
              value={musicUrl} 
              onChange={e => setMusicUrl(e.target.value)} 
              className="input-field" 
              placeholder="Link da Música (Spotify, YouTube)"
            />
          </div>
        <PhotoGallery
          photos={photos}
          setPhotos={setPhotos}
          availableStoragePhotos={availableStoragePhotos}
          setAvailableStoragePhotos={setAvailableStoragePhotos}
          handlePhotoSelection={handlePhotoSelection}
          handleRemovePhoto={handleRemovePhoto}
          handleReplacePhoto={handleReplacePhoto}
          handleUploadPhotos={handleUploadPhotos}
          isUploading={isUploading}
        />
        <VideoSelector
          video={video}
          handleVideoSelection={handleVideoSelection}
          handleRemoveVideo={handleRemoveVideo}
          handleReplaceVideo={handleReplaceVideo}
          handleUploadVideo={handleUploadVideo}
          isUploading={isUploading}
        />

        {/* Seção de Mensagem */}
        <div className="card stagger-children">
          <h3 className="text-xl font-bold mb-4 text-gradient">💌 Mensagem Especial</h3>
          <textarea
            value={message}
            onChange={e => setMessage(e.target.value)}
            rows={5}
            style={{ minHeight: 100, resize: 'vertical' }}
            className="input-field"
            placeholder="Sua Mensagem Especial (pública)..."
          ></textarea>
        </div>

        {/* Seção Secret Love */}
        <div className="card stagger-children">
          <label className="flex items-center space-x-3 cursor-pointer mb-4">
            <input 
              type="checkbox" 
              checked={secretLoveEnabled} 
              onChange={() => setSecretLoveEnabled(!secretLoveEnabled)} 
              className="w-5 h-5 text-pink-500 bg-slate-600 border-slate-500 rounded focus:ring-pink-500 focus-visible"
            />
            <span className="text-lg font-semibold text-pink-400">🔒 Ativar "Secret Love"</span>
          </label>
          {secretLoveEnabled && (
            <div className="mt-4 space-y-4 p-4 bg-gradient-to-br from-pink-500/10 to-purple-500/10 rounded-lg border border-pink-500/30 animate-fade-in-up">
              <h3 className="text-md font-bold text-pink-300">✨ Conteúdo Secreto</h3>
              <input 
                type="password" 
                value={secretPassword} 
                onChange={e => setSecretPassword(e.target.value)} 
                className="input-field focus:ring-pink-500" 
                placeholder="Crie uma senha para esta seção"
              />
              <textarea
                value={secretMessage}
                onChange={e => setSecretMessage(e.target.value)}
                rows={5}
                style={{ minHeight: 100, resize: 'vertical' }}
                className="input-field focus:ring-pink-500"
                placeholder="Escreva a sua grande mensagem secreta aqui..."
              ></textarea>
            </div>
          )}
        </div>

        {/* Botões de ação */}
        <div className="flex gap-4 mt-8">
          {initialData ? (
            <button 
              type="submit" 
              disabled={isUploading} 
              className="btn-primary flex-1 text-lg animate-bounce-in hover-lift"
            >
              💾 Salvar Alterações
            </button>
          ) : (
            <button 
              type="submit" 
              disabled={isUploading} 
              className="btn-primary flex-1 text-lg animate-bounce-in hover-lift"
            >
              ✨ Criar Memória
            </button>
          )}
        </div>
      </form>
    </div>
  );
}

function parseDateTimeBR(str) {
  // Espera formato DD/MM/AAAA HH:mm
  const match = str.match(/(\d{2})\/(\d{2})\/(\d{4})\s+(\d{2}):(\d{2})/);
  if (!match) return null;
  const [, dd, mm, yyyy, hh, min] = match;
  return new Date(`${yyyy}-${mm}-${dd}T${hh}:${min}:00`);
}

function TimeTogether({ startDate, isDisneyMode }) {
  const [now, setNow] = useState(Date.now());
  useEffect(() => {
    const interval = setInterval(() => setNow(Date.now()), 50);
    return () => clearInterval(interval);
  }, []);
  const start = startDate ? new Date(startDate) : null;
  if (!start || isNaN(start.getTime())) return <span className="text-red-400">Data inválida</span>;
  let end = new Date(now);

  // Cálculo preciso de anos, meses, semanas, dias, horas, minutos, segundos, milissegundos
  let years = end.getFullYear() - start.getFullYear();
  let months = end.getMonth() - start.getMonth();
  let days = end.getDate() - start.getDate();
  let hours = end.getHours() - start.getHours();
  let minutes = end.getMinutes() - start.getMinutes();
  let seconds = end.getSeconds() - start.getSeconds();
  let ms = end.getMilliseconds() - start.getMilliseconds();

  if (ms < 0) { ms += 1000; seconds--; }
  if (seconds < 0) { seconds += 60; minutes--; }
  if (minutes < 0) { minutes += 60; hours--; }
  if (hours < 0) { hours += 24; days--; }
  if (days < 0) {
    // Pega o último mês do ano anterior se necessário
    let prevMonth = new Date(end.getFullYear(), end.getMonth(), 0);
    days += prevMonth.getDate();
    months--;
  }
  if (months < 0) { months += 12; years--; }

  // Agora calcula semanas e dias restantes
  let weeks = Math.floor(days / 7);
  days = days % 7;

  return (
    <div className={`flex flex-wrap gap-2 font-mono text-lg mt-2 ${isDisneyMode ? 'magic-text' : 'text-emerald-300'}`}>
      <span>{years} ano{years!==1?'s':''}</span>
      <span>{months} mês{months!==1?'es':''}</span>
      <span>{weeks} semana{weeks!==1?'s':''}</span>
      <span>{days} dia{days!==1?'s':''}</span>
      <span>{hours}h</span>
      <span>{minutes}m</span>
      <span>{seconds}s</span>
      <span>{ms.toString().padStart(3,'0')}ms</span>
    </div>
  );
}

function SecretLoveSection({ password, videoUrl, secretMessage }) {
  const [isUnlocked, setIsUnlocked] = useState(false);
  const [passwordAttempt, setPasswordAttempt] = useState('');
  const [error, setError] = useState('');

  const handleUnlock = () => {
    if (passwordAttempt === password) {
      setIsUnlocked(true);
      setError('');
    } else {
      setError('Senha incorreta. Tente novamente.');
    }
  };

  if (isUnlocked) {
    return (
      <div className="flex flex-col gap-5 p-6 h-fit w-full z-10 rounded-2xl bg-gradient-to-br from-pink-500 to-rose-600">
        <h3 className="font-bold text-white text-xl">Secret Love ✨</h3>
        {videoUrl && (
          <video controls src={videoUrl} className="w-full rounded-xl shadow-lg aspect-video">
            Seu navegador não suporta o player de vídeo.
          </video>
        )}
        <div className="font-semibold text-lg leading-relaxed text-white whitespace-pre-line break-words w-full max-w-3xl" style={{wordBreak: 'break-word'}}>{secretMessage}</div>
      </div>
    );
  }

  return (
    <div className="flex flex-col gap-4 p-6 h-fit w-full z-10 rounded-2xl bg-slate-800/80 border-2 border-dashed border-pink-400 text-center">
      <LockIcon className="w-10 h-10 mx-auto text-pink-400"/>
      <h3 className="font-bold text-white text-xl">Secret Love</h3>
      <p className="text-slate-300">Esta área contém uma surpresa especial e é protegida por senha.</p>
      <div className="flex flex-col sm:flex-row gap-2 justify-center">
        <input 
          type="password" 
          value={passwordAttempt}
          onChange={(e) => setPasswordAttempt(e.target.value)}
          className="bg-slate-700 border border-slate-600 rounded-lg p-2 text-white text-center focus:ring-2 focus:ring-pink-500 outline-none"
          placeholder="Digite a senha"
        />
        <button onClick={handleUnlock} className="bg-pink-500 hover:bg-pink-600 text-white font-bold py-2 px-4 rounded-lg">
          Desbloquear
        </button>
      </div>
      {error && <p className="text-red-400 mt-2">{error}</p>}
    </div>
  );
}

function MemoryPage({ memory, onExit, isCreator, onEditMemory, onDeleteMemory, isDisneyMode, onToggleDisneyMode }) {
  const { title, message, musicUrl, musicTitle, musicArtist, coupleNames, startDate, photos, secretLoveEnabled, secretPassword, secretVideoUrl, secretMessage, secretVideo } = memory;
  const coverArt = photos && photos.length > 0 ? photos[0] : null;
  const embedUrl = getEmbedUrl(musicUrl);

  return (
    <div className={`w-full h-screen overflow-y-auto transition-all duration-1000 ${isDisneyMode ? 'disney-mode' : ''}`} style={{
      backgroundImage: isDisneyMode 
        ? 'linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%)'
        : 'linear-gradient(rgb(71, 98, 125) 0%, rgb(71, 98, 125) 45%, rgb(49, 68, 87) 65%, rgb(18, 18, 18) 85%)',
      backgroundColor: isDisneyMode ? 'transparent' : 'rgb(18, 18, 18)',
      color: 'white',
      position: 'relative'
    }}>
      {/* Efeitos mágicos do modo Disney */}
      {isDisneyMode && (
        <>
          <div className="absolute inset-0 bg-gradient-to-b from-transparent via-purple-500/10 to-pink-500/10 animate-pulse"></div>
          <div className="absolute top-0 left-0 w-full h-full overflow-hidden pointer-events-none">
            {[...Array(20)].map((_, i) => (
              <div
                key={i}
                className="absolute animate-sparkle"
                style={{
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 100}%`,
                  animationDelay: `${Math.random() * 3}s`,
                  animationDuration: `${2 + Math.random() * 2}s`
                }}
              >
                ✨
              </div>
            ))}
          </div>
          {/* Efeito de brilho mágico */}
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent animate-pulse" style={{ animationDuration: '3s' }}></div>
        </>
      )}
              <div className={`flex flex-col w-full h-full gap-5 px-6 ${isDisneyMode ? 'relative z-10' : ''}`}>
        {/* Top Bar */}
        <div className="flex w-full items-center h-fit pt-4 justify-between text-white">
          <button onClick={onExit}><ChevronDownIcon className="w-7 h-7" /></button>
          <span className={`font-semibold ${isDisneyMode ? 'magic-text text-2xl' : ''}`}>{title}</span>
          <div className="flex items-center gap-2">
            <button 
              onClick={onToggleDisneyMode}
              className={`px-4 py-2 rounded-full text-sm font-bold transition-all duration-500 transform hover:scale-105 ${
                isDisneyMode 
                  ? 'bg-gradient-to-r from-purple-500 to-pink-500 shadow-lg shadow-purple-500/50' 
                  : 'bg-gradient-to-r from-blue-500 to-purple-500 shadow-lg shadow-blue-500/50'
              }`}
            >
              {isDisneyMode ? '🏰 Voltar ao Normal' : '✨ Atravessar o Espelho'}
            </button>
            <button><EllipsisIcon className="w-7 h-7" /></button>
          </div>
        </div>

        {/* Player */}
        <div className="flex w-full flex-col flex-grow gap-4">
          <div className="flex w-full justify-center items-center px-9">
            {coverArt ? (
              <div className={`${isDisneyMode ? 'disney-glow' : ''}`}>
                <img src={coverArt} alt="Capa da memória" className="w-full max-w-sm aspect-square object-cover rounded-lg shadow-2xl" />
              </div>
            ) : (
              <div className={`w-full max-w-sm aspect-square rounded-lg flex flex-col items-center justify-center ${isDisneyMode ? 'bg-gradient-to-br from-purple-500/20 to-pink-500/20 disney-glow' : 'bg-slate-700'} ${isDisneyMode ? 'text-purple-300' : 'text-slate-400'}`}>
                <CameraIcon className="w-12 h-12" />
                <p className="mt-2">Nenhuma foto adicionada</p>
              </div>
            )}
          </div>

          {/* Título e Artista */}
          <div className="flex flex-col w-full h-fit gap-2">
            <div className="flex w-full justify-between items-center h-fit">
              <div className="flex flex-col w-[80%] overflow-hidden">
                <h3 className={`font-extrabold text-2xl scrolling-text-container ${isDisneyMode ? 'magic-text' : 'text-white'}`}>
                  <span className="scrolling-text">{musicTitle}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                </h3>
                <span className={`font-light ${isDisneyMode ? 'text-purple-200' : 'text-slate-300'}`}>{musicArtist}</span>
              </div>
            </div>
            {/* Barra de Progresso (Apenas Visual) */}
            <div className={`flex w-full h-1.5 rounded-lg relative items-center ${isDisneyMode ? 'bg-purple-500/25' : 'bg-white/25'}`}>
              <div className={`absolute left-0 top-0 rounded-l-lg h-full ${isDisneyMode ? 'bg-gradient-to-r from-purple-400 to-pink-400' : 'bg-white'}`} style={{ width: '30%' }}></div>
              <div className={`absolute h-3 w-3 rounded-full z-10 ${isDisneyMode ? 'bg-gradient-to-r from-purple-400 to-pink-400 animate-disney-glow' : 'bg-white'}`} style={{ left: '30%', transform: 'translateX(-50%)' }}></div>
            </div>
            <div className={`flex w-full h-fit justify-between text-xs ${isDisneyMode ? 'text-purple-200' : 'text-slate-300'}`}>
              <p>0:58</p>
              <p>2:59</p>
            </div>
          </div>
          {/* Controles do Player (Apenas Visual) */}
          <div className="flex justify-between items-center h-fit text-white">
            <ShuffleIcon className={`w-6 h-6 sm:w-7 sm:h-7 ${isDisneyMode ? 'text-purple-400' : 'text-emerald-400'}`} />
            <div className="flex flex-row h-fit items-center justify-center gap-6 sm:gap-8">
              <SkipBackIcon className={`w-7 h-7 sm:w-8 sm:h-8 ${isDisneyMode ? 'text-purple-300' : ''}`}/>
              <div className={`flex p-0 items-center justify-center w-16 h-16 sm:w-20 sm:h-20 rounded-full text-black ${isDisneyMode ? 'bg-gradient-to-br from-purple-400 to-pink-400 animate-disney-glow' : 'bg-white'}`}>
                <PlayIcon className="w-8 h-8 sm:w-10 sm:h-10" />
              </div>
              <SkipForwardIcon className={`w-7 h-7 sm:w-8 sm:h-8 ${isDisneyMode ? 'text-purple-300' : ''}`}/>
            </div>
            <RepeatIcon className={`w-6 h-6 sm:w-7 sm:h-7 ${isDisneyMode ? 'text-purple-400' : ''}`}/>
          </div>
          {/* Player de Música Embutido (Funcional) */}
          {embedUrl && (
            <div className="mt-4">
              <div style={{ position: 'relative', width: '100%', paddingBottom: '56.25%' }}>
                <iframe
                  src={embedUrl}
                  style={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    width: '100%',
                    height: '100%',
                    border: 0,
                    borderRadius: '12px'
                  }}
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowFullScreen
                  title="Embedded Music Player"
                ></iframe>
              </div>
            </div>
          )}
        </div>

        {/* "Sobre o casal" Section */}
        <div className="flex flex-col gap-6 h-fit w-full mt-4">
          <div className={`flex flex-col h-fit w-full z-10 rounded-2xl ${isDisneyMode ? 'bg-gradient-to-br from-purple-500/30 to-pink-500/30 disney-glow' : 'bg-[#332f2f]'}`}>
            <div className="flex flex-col gap-4 p-4 w-full">
              <div className="flex flex-col text-white">
                <span className={`font-black text-2xl ${isDisneyMode ? 'magic-text' : ''}`}>{coupleNames}</span>
                <span className={`font-extralight text-base ${isDisneyMode ? 'text-purple-200' : 'text-slate-300'}`}>Juntos desde {new Date(startDate).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' })}</span>
              </div>
              <TimeTogether startDate={startDate} isDisneyMode={isDisneyMode} />
            </div>
          </div>
        </div>

        {/* Mensagem Especial Pública */}
        <div className="flex w-full h-fit items-center justify-center mb-4">
          <div className={`flex gap-5 p-6 flex-col h-fit w-full z-10 rounded-2xl ${isDisneyMode ? 'disney-glow' : ''}`} style={{ 
            backgroundColor: isDisneyMode ? 'rgba(255, 105, 180, 0.8)' : 'rgb(228, 44, 20)',
            background: isDisneyMode ? 'linear-gradient(135deg, rgba(255, 105, 180, 0.8), rgba(138, 43, 226, 0.8))' : 'rgb(228, 44, 20)'
          }}>
            <span className={`font-bold text-xl ${isDisneyMode ? 'magic-text' : 'text-white'}`}>Mensagem especial</span>
            <div className={`font-bold text-2xl leading-9 whitespace-pre-line break-words w-full max-w-3xl ${isDisneyMode ? 'magic-text' : 'text-white'}`} style={{wordBreak: 'break-word'}}>{message}</div>
          </div>
        </div>
        {/* Galeria de Fotos Públicas Adicionais */}
        {photos && photos.length > 1 && (
          <div className="flex flex-col gap-5 w-full items-center mb-4">
            {photos.slice(1).map((photoUrl, index) => (
              <div key={index} className={`${isDisneyMode ? 'disney-glow' : ''}`}>
                <img src={photoUrl} alt={`Foto da memória ${index + 2}`} className="w-full max-w-3xl h-auto rounded-2xl shadow-lg"/>
              </div>
            ))}
          </div>
        )}
        {/* Seção Secret Love */}
        {secretLoveEnabled && (
          <div className="flex w-full h-fit items-center justify-center mb-4">
            <SecretLoveSection password={secretPassword} videoUrl={secretVideo || secretVideoUrl} secretMessage={secretMessage} />
          </div>
        )}
        {/* Imagem Final */}
        <div className="flex w-full h-fit items-center justify-center mb-6">
          <img alt="wrapped-banner" className="w-full h-auto rounded-2xl" src="https://placehold.co/800x400/010101/FFF?text=TimeCapsule" />
        </div>
        {isCreator && (
          <div className="flex justify-end gap-2 mt-4">
            <button onClick={() => onEditMemory(memory.id)} className="bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-2 px-4 rounded-lg">Editar</button>
            <button onClick={() => onDeleteMemory(memory.id)} className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg">Apagar</button>
          </div>
        )}
      </div>
    </div>
  );
}

export default function App() {
  const [isCreator, setIsCreator] = useState(false);
  const [user, setUser] = useState(null);
  const [visitorName, setVisitorName] = useState('');
  const [visitorSurname, setVisitorSurname] = useState('');
  const [visitorStep, setVisitorStep] = useState('ask'); // 'ask', 'showMsg', 'showMemory'
  const [visitorMsg, setVisitorMsg] = useState('');
  const [page, setPage] = useState('home');
  const [memories, setMemories] = useState({});
  const [currentMemoryId, setCurrentMemoryId] = useState(null);
  const [loadingMemory, setLoadingMemory] = useState(true);
  const [draftMemory, setDraftMemory] = useState(null); // Para preview antes de publicar
  const [editMode, setEditMode] = useState(false);
  const [editingDraft, setEditingDraft] = useState(null); // Para edição de draft no preview
  const [adminChoice, setAdminChoice] = useState(null); // 'edit' | 'new' | null
  const [isDisneyMode, setIsDisneyMode] = useState(false); // Novo estado para modo Disney

  // Firebase Auth
  useEffect(() => {
    const auth = getAuth(app);
    const unsubscribe = auth.onAuthStateChanged((user) => {
      if (user && user.email === 'marcelop.smile@gmail.com') {
        setIsCreator(true);
        setUser(user);
        setPage('home');
      } else {
        setIsCreator(false);
        setUser(user);
      }
    });
    return () => unsubscribe();
  }, []);

  // Carregar a memória mais recente do Firestore
  useEffect(() => {
    async function fetchLatestMemory() {
      setLoadingMemory(true);
      const q = query(collection(db, 'memorias'), orderBy('createdAt', 'desc'), limit(1));
      const querySnapshot = await getDocs(q);
      let loaded = {};
      let lastId = null;
      querySnapshot.forEach((docSnap) => {
        loaded[docSnap.id] = { id: docSnap.id, ...docSnap.data() };
        lastId = docSnap.id;
      });
      setMemories(loaded);
      if (lastId) setCurrentMemoryId(lastId);
      setLoadingMemory(false);
    }
    fetchLatestMemory();
  }, []);

  // Helper para pegar o ID da última memória
  const getLastMemoryId = () => {
    const ids = Object.keys(memories);
    if (ids.length === 0) return null;
    return ids[ids.length - 1];
  };

  const handleGoogleLogin = async () => {
    const auth = getAuth(app);
    const provider = new GoogleAuthProvider();
    try {
      await signInWithPopup(auth, provider);
    } catch (e) {
      alert('Erro ao fazer login com Google.');
    }
  };

  const handleLogout = async () => {
    const auth = getAuth(app);
    await signOut(auth);
    setIsCreator(false);
    setUser(null);
    setVisitorStep('ask');
    setVisitorMsg('');
    setPage('home');
  };

  // Lógica de identificação de visitante
  const handleVisitorSubmit = (e) => {
    e.preventDefault();
    if (!visitorName || !visitorSurname) return;
    let msg = '';
    if (visitorName.trim().toLowerCase() === 'sofia' && visitorSurname.trim().toLowerCase() === 'miketem') {
      msg = 'Oi minha gatinha, bem vinda à nossa retrospectiva.';
    } else if (visitorSurname.trim().toLowerCase() === 'miketem') {
      msg = `Bem-vindo(a) ${visitorName} ${visitorSurname}, é um prazer receber a família!`;
    } else {
      msg = `Bem-vindo(a) ${visitorName}! Obrigado pela visita. Aqui estão minhas memórias com a Sofi.`;
    }
    setVisitorMsg(msg);
    setVisitorStep('showMsg');
    setTimeout(() => setVisitorStep('showMemory'), 2000);
  };

  // Personalizar mensagem para login Google
  useEffect(() => {
    if (user && !isCreator) {
      const [nome, ...sobrenomeArr] = (user.displayName || '').split(' ');
      const sobrenome = sobrenomeArr.join(' ');
      let msg = '';
      if (nome && sobrenome && nome.toLowerCase() === 'sofia' && sobrenome.toLowerCase() === 'miketem') {
        msg = 'Oi minha gatinha, bem vinda à nossa retrospectiva.';
      } else if (sobrenome && sobrenome.toLowerCase() === 'miketem') {
        msg = `Bem-vindo(a) ${nome} ${sobrenome}, é um prazer receber a família!`;
      } else if (nome) {
        msg = `Bem-vindo(a) ${nome}! Obrigado pela visita. Aqui estão minhas memórias com a Sofi.`;
      } else {
        msg = 'Bem-vindo(a)! Obrigado pela visita. Aqui estão minhas memórias com a Sofi.';
      }
      setVisitorMsg(msg);
      setVisitorStep('showMsg');
      setTimeout(() => setVisitorStep('showMemory'), 2000);
    }
  }, [user, isCreator]);

  // Detectar login do admin e mostrar tela de escolha
  useEffect(() => {
    if (isCreator) {
      setAdminChoice(null); // Resetar escolha ao logar
    }
  }, [isCreator]);

  // Função para criar nova memória
  const handleCreateMemory = (memoryData) => {
    setDraftMemory({ ...memoryData, createdAt: new Date().toISOString() });
    setPage('preview');
  };

  // Publicar memória no Firestore
  const handlePublishMemory = async () => {
    if (!draftMemory) return;
    const docRef = await addDoc(collection(db, 'memorias'), draftMemory);
    setMemories({ [docRef.id]: { ...draftMemory, id: docRef.id } });
    setCurrentMemoryId(docRef.id);
    setDraftMemory(null);
    setPage('memory');
  };

  // Editar draft (volta para o formulário)
  const handleEditDraft = () => {
    setPage('form');
  };

  // Função para editar memória existente
  const handleEditMemory = async (id, updatedData) => {
    const docRef = doc(db, 'memorias', id);
    await updateDoc(docRef, updatedData);
    setMemories((prev) => ({ ...prev, [id]: { ...prev[id], ...updatedData } }));
  };

  // Função para deletar memória
  const handleDeleteMemory = async (id) => {
    await deleteDoc(doc(db, 'memorias', id));
    setMemories({});
    setCurrentMemoryId(null);
    setPage('home');
  };

  const handleExitMemory = () => {
    setCurrentMemoryId(null);
    setPage(isCreator ? 'home' : 'viewer_welcome');
  }

  // Função para iniciar edição de memória existente
  const handleStartEdit = () => {
    setEditMode(true);
    setPage('edit');
  };

  // Função para salvar edição
  const handleSaveEdit = async (updatedData) => {
    if (!currentMemoryId) return;
    // Atualiza no Firestore
    await handleEditMemory(currentMemoryId, updatedData);
    // Leva para preview da memória atualizada
    setDraftMemory({ ...updatedData, id: currentMemoryId });
    setEditMode(false);
    setPage('preview');
    setAdminChoice(null);
  };

  const handleToggleDisneyMode = () => {
    // Adiciona um pequeno delay para o efeito de transição
    const transitionOverlay = document.createElement('div');
    transitionOverlay.className = 'fixed inset-0 bg-gradient-to-br from-purple-500/50 to-pink-500/50 z-50 flex items-center justify-center';
    transitionOverlay.innerHTML = `
      <div class="text-white text-4xl font-bold animate-pulse">
        ${!isDisneyMode ? '✨ Atravessando o Espelho... ✨' : '🏰 Voltando ao Normal... 🏰'}
      </div>
    `;
    document.body.appendChild(transitionOverlay);
    
    setTimeout(() => {
      setIsDisneyMode(!isDisneyMode);
      setTimeout(() => {
        document.body.removeChild(transitionOverlay);
      }, 500);
    }, 1000);
  };

  const renderPage = () => {
    // Tela de escolha para admin
    if (isCreator && !adminChoice) {
      const hasMemory = Object.keys(memories).length > 0;
      return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-slate-900 text-white gap-6">
          <h2 className="text-2xl font-bold mb-2">O que deseja fazer?</h2>
          <button
            onClick={() => {
              if (hasMemory) {
                setCurrentMemoryId(getLastMemoryId());
                setAdminChoice('edit');
              } else {
                setAdminChoice('no-memory');
              }
            }}
            className="bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-3 px-8 rounded-full text-xl shadow-lg transition-transform transform hover:scale-105"
          >
            Editar memória mais recente
          </button>
          <button onClick={() => setAdminChoice('new')} className="bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-3 px-8 rounded-full text-xl shadow-lg transition-transform transform hover:scale-105">Criar nova memória</button>
        </div>
      );
    }
    // Mensagem se não houver memória para editar
    if (isCreator && adminChoice === 'no-memory') {
      return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-slate-900 text-white gap-6">
          <h2 className="text-2xl font-bold mb-2">Nenhuma memória encontrada.</h2>
          <p className="mb-4">Crie uma nova memória para começar.</p>
          <button onClick={() => setAdminChoice('new')} className="bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-3 px-8 rounded-full text-xl shadow-lg transition-transform transform hover:scale-105">Criar nova memória</button>
        </div>
      );
    }
    // Se admin escolher editar
    if (isCreator && adminChoice === 'edit') {
      if (!currentMemoryId || !memories[currentMemoryId]) {
        return (
          <div className="flex flex-col items-center justify-center min-h-screen bg-slate-900 text-white gap-6">
            <h2 className="text-2xl font-bold mb-2">Carregando memória para edição...</h2>
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-emerald-400"></div>
          </div>
        );
      }
      return <MemoryForm onCreateMemory={handleSaveEdit} onNavigate={() => { setEditMode(false); setPage('memory'); setAdminChoice(null); }} initialData={memories[currentMemoryId]} loadingMemory={loadingMemory} />;
    }
    // Se admin escolher criar nova
    if (isCreator && adminChoice === 'new') {
      return <MemoryForm onCreateMemory={handleCreateMemory} onNavigate={() => { setAdminChoice(null); setPage('home'); }} initialData={null} loadingMemory={loadingMemory} />;
    }
    // Preview só para criação de nova memória
    if (page === 'preview' && draftMemory) {
      return (
        <div>
          <MemoryPage 
            memory={draftMemory} 
            onExit={handleEditDraft} 
            isCreator={true}
            isDisneyMode={isDisneyMode}
            onToggleDisneyMode={handleToggleDisneyMode}
          />
          <div className="flex justify-center gap-4 mt-4">
            <button onClick={handleEditDraft} className="bg-slate-500 hover:bg-slate-600 text-white font-bold py-2 px-4 rounded-lg">Editar</button>
            <button onClick={handlePublishMemory} className="bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-2 px-4 rounded-lg">Publicar</button>
          </div>
        </div>
      );
    }
    // Edição de memória existente
    if (page === 'edit' && currentMemoryId && memories[currentMemoryId]) {
      return <MemoryForm onCreateMemory={handleSaveEdit} onNavigate={() => { setEditMode(false); setPage('memory'); setAdminChoice(null); }} initialData={memories[currentMemoryId]} loadingMemory={loadingMemory} />;
    }
    if (page === 'memory') {
      if (currentMemoryId && memories[currentMemoryId]) {
        return <MemoryPage 
          memory={memories[currentMemoryId]} 
          onExit={handleExitMemory} 
          isCreator={isCreator}
          onEditMemory={handleStartEdit}
          onDeleteMemory={handleDeleteMemory}
          isDisneyMode={isDisneyMode}
          onToggleDisneyMode={handleToggleDisneyMode}
        />;
      } else {
        return <div className="text-center p-8 text-white bg-slate-900 h-screen flex flex-col justify-center"><h2 className="text-2xl text-amber-400">Memória não encontrada.</h2><p className="mt-2">Este link pode ser inválido ou de uma sessão diferente.</p><button onClick={handleExitMemory} className="mt-4 bg-emerald-500 p-2 rounded-lg">Voltar</button></div>
      }
    }
    switch (page) {
      case 'form':
        return isCreator ? <MemoryForm onCreateMemory={handleCreateMemory} onNavigate={setPage} loadingMemory={loadingMemory} /> : <HomePage onNavigate={setPage} />;
      case 'home':
        return isCreator ? <HomePage onNavigate={setPage} /> : <div className="text-center p-8 text-white bg-slate-900 h-screen flex flex-col justify-center"><h1 className="text-4xl font-bold">Bem-vindo(a) à MY LOVED SOFIA rewind</h1><p className="text-slate-300 mt-2">Acesse uma memória através de um link compartilhado.</p></div>;
      default:
        return <div className="text-center p-8 text-white bg-slate-900 h-screen flex flex-col justify-center"><h1 className="text-4xl font-bold">Bem-vindo(a) à MY LOVED SOFIA rewind</h1><p className="text-slate-300 mt-2">Acesse uma memória através de um link compartilhado.</p></div>;
    }
  };

  // Renderização condicional
  if (!isCreator && !user) {
    // Visitante não autenticado
    if (visitorStep === 'ask') {
      return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-slate-900 text-white relative overflow-hidden">
          {/* Background animado */}
          <div className="absolute inset-0 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900"></div>
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(16,185,129,0.1),transparent_50%)]"></div>
          
          {/* Partículas flutuantes */}
          <div className="absolute inset-0 overflow-hidden pointer-events-none">
            {[...Array(12)].map((_, i) => (
              <div
                key={i}
                className="absolute w-1 h-1 bg-emerald-400/30 rounded-full animate-float"
                style={{
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 100}%`,
                  animationDelay: `${Math.random() * 4}s`,
                  animationDuration: `${4 + Math.random() * 3}s`
                }}
              />
            ))}
          </div>

          <div className="relative z-10 card w-full max-w-md animate-fade-in-up">
            <h2 className="text-3xl font-bold mb-6 text-gradient text-center">👋 Quem está acessando?</h2>
            <form onSubmit={handleVisitorSubmit} className="flex flex-col gap-4">
              <input 
                type="text" 
                placeholder="Nome" 
                value={visitorName} 
                onChange={e => setVisitorName(e.target.value)} 
                className="input-field" 
              />
              <input 
                type="text" 
                placeholder="Sobrenome" 
                value={visitorSurname} 
                onChange={e => setVisitorSurname(e.target.value)} 
                className="input-field" 
              />
              <button 
                type="submit" 
                className="btn-primary animate-bounce-in"
                style={{ animationDelay: '0.3s' }}
              >
                🚀 Acessar
              </button>
            </form>
            <div className="mt-6 text-center text-slate-400 text-sm">Ou</div>
            <button 
              onClick={handleGoogleLogin} 
              className="bg-white text-slate-900 font-bold py-3 px-4 rounded-lg flex items-center justify-center gap-2 hover:bg-gray-100 transition-colors duration-300 animate-bounce-in"
              style={{ animationDelay: '0.6s' }}
            >
              <svg className="w-5 h-5" viewBox="0 0 48 48"><g><path fill="#4285F4" d="M24 9.5c3.54 0 6.7 1.22 9.19 3.23l6.85-6.85C36.68 2.69 30.77 0 24 0 14.82 0 6.71 5.13 2.69 12.56l7.98 6.2C12.13 13.09 17.62 9.5 24 9.5z"/><path fill="#34A853" d="M46.1 24.55c0-1.64-.15-3.22-.42-4.74H24v9.01h12.42c-.54 2.9-2.18 5.36-4.65 7.04l7.19 5.59C43.99 37.13 46.1 31.3 46.1 24.55z"/><path fill="#FBBC05" d="M10.67 28.13a14.5 14.5 0 0 1 0-8.26l-7.98-6.2A23.94 23.94 0 0 0 0 24c0 3.77.9 7.34 2.69 10.56l7.98-6.43z"/><path fill="#EA4335" d="M24 48c6.48 0 11.92-2.14 15.89-5.82l-7.19-5.59c-2.01 1.35-4.6 2.15-8.7 2.15-6.38 0-11.87-3.59-14.33-8.79l-7.98 6.43C6.71 42.87 14.82 48 24 48z"/></g></svg>
              Entrar com Google
            </button>
          </div>
        </div>
      );
    } else if (visitorStep === 'showMsg') {
      return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-slate-900 text-white relative overflow-hidden">
          {/* Background animado */}
          <div className="absolute inset-0 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900"></div>
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(16,185,129,0.1),transparent_50%)]"></div>
          
          <div className="relative z-10 card w-full max-w-md text-center animate-bounce-in">
            <div className="text-6xl mb-4 animate-float">✨</div>
            <span className="text-2xl font-bold text-gradient">{visitorMsg}</span>
          </div>
        </div>
      );
    } else if (visitorStep === 'showMemory') {
      // Mostra a cápsula mais recente (memória)
      const memoryIds = Object.keys(memories);
      const lastMemory = memoryIds.length > 0 ? memories[memoryIds[memoryIds.length - 1]] : null;
      if (lastMemory) {
        return <MemoryPage 
          memory={lastMemory} 
          onExit={() => setVisitorStep('ask')}
          isDisneyMode={isDisneyMode}
          onToggleDisneyMode={handleToggleDisneyMode}
        />;
      } else {
        return <div className="flex flex-col items-center justify-center min-h-screen bg-slate-900 text-white"><span>Nenhuma memória encontrada.</span></div>;
      }
    }
  }

  return (
    <main className="w-full h-screen bg-slate-900">
      {user && (
        <div className="absolute top-4 right-4 z-50">
          <span className="mr-2">Olá, {user.displayName || user.email}</span>
          <button onClick={handleLogout} className="bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded">Sair</button>
        </div>
      )}
      {renderPage()}
    </main>
  );
} 